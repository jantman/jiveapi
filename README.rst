python-jive-api
===============

Simple and limited Python client for `Jive <https://www.jivesoftware.com/>`_ collaboration software `ReST API v3 <https://developers.jivesoftware.com/api/v3/cloud/rest/index.html>`_.

Status and Limitations
----------------------

I'm writing this to be a working Python wrapper around a small portion of the Jive ReST API - specifically, uploading/publishing blog posts ("Posts" API data type) and uploading/updating Documents. I'm doing this in my personal time, but we'll be using the project at work for a very limited requirement: "syndicating" documentation that we publish on internal web servers to our corporate Jive instance. I don't plan on adding support beyond what's required for that, but contributions are welcome.

Requirements
------------

* Python 3.4+. Yes, this package is *only* developed and tested against Python3. It *should* work under 2.7 as well, but that is neither tested nor supported.
* `requests <http://docs.python-requests.org/en/master/>`_ package

Installation
------------

``pip install jiveapi``

Authentication
--------------

Version 3 of the Jive ReST API is rather limited in terms of `Authentication methods <https://developer.jivesoftware.com/intro/#building-an-api-client>`_: OAuth is only supported for Jive Add-Ons. The alternative is HTTP Basic, which is not supported for federated/SSO accounts. This project uses HTTP Basic auth, which requires a Jive local (service) account.

Content IDs
-----------

When a Content object (e.g. Document, Post, etc.) is created in Jive it is assigned a unique ID. This ID must be provided in order to update or delete the content. It is up to you, the user, to store the IDs generated by this package when you create content objects. For example use it's enough to record them from the CLI output. For actual production use, I recommend using the Python API and storing the returned IDs in a database or key/value store, or committing them back to the git repository.

Examples - CLI
--------------

TBD.

Examples - Python
-----------------

TBD.

Testing
-------

Testing is done via `tox <https://tox.readthedocs.io/en/latest/>`_ and `pytest <https://docs.pytest.org/en/latest/>`_. ``pip install tox`` then ``tox`` to run tests.

The package itself uses the wonderful `requests package <http://docs.python-requests.org/en/master/>`_ as a HTTP(S) client. Tests use the `betamax <http://betamax.readthedocs.io/en/latest/index.html>`_ package to record and replay HTTP(S) requests and responses. When adding a new test using betamax, set ``JIVEAPI_TEST_MODE=--record`` in your environment to capture and record new requests - otherwise, outgoing HTTP requests will be blocked. To re-record a test, delete the current capture from ``tests/fixtures/cassettes``. Before committing test data, please inspect it and be sure that no sensitive information is included. To print all base64 bodies from a specific betamax "cassette", you can use ``jiveapi/tests/fixtures/showcassette.py``.

Development
-----------

1. Clone the git repo.
2. ``virtualenv .``
3. ``python setup.py develop``
4. Make changes as necessary. Run tests with ``tox``.

License
-------

This software is licensed under the `Affero General Public License, version 3 or later <https://www.gnu.org/licenses/agpl-3.0.en.html>`_. If you're not redistributing or modifying this software, compliance with the license is simple: make sure anyone interacting with it (even remotely over a network) is informed of where the source code can be downloaded (the project URL in the Python package, or the ``jiveapi.version.PROJECT_URL`` string constant). If you intend on modifying it, the user must have a way of retrieving the exact running source code. If you're intending on distributing it outside your company, please read the full license and consult your legal counsel or Open Source Compliance policy.
